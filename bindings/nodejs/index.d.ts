/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum Scheme {
  /** [azblob][crate::services::Azblob]: Azure Storage Blob services. */
  Azblob = 0,
  /** [azdfs][crate::services::Azdfs]: Azure Data Lake Storage Gen2. */
  Azdfs = 1,
  /** [dashmap][crate::services::Dashmap]: dashmap backend support. */
  Dashmap = 2,
  /** [fs][crate::services::Fs]: POSIX alike file system. */
  Fs = 3,
  /** [gcs][crate::services::Gcs]: Google Cloud Storage backend. */
  Gcs = 4,
  /** [ghac][crate::services::Ghac]: Github Action Cache services. */
  Ghac = 5,
  /** [hdfs][crate::services::Hdfs]: Hadoop Distributed File System. */
  Hdfs = 6,
  /** [http][crate::services::Http]: HTTP backend. */
  Http = 7,
  /** [ftp][crate::services::Ftp]: FTP backend. */
  Ftp = 8,
  /** [ipmfs][crate::services::Ipfs]: IPFS HTTP Gateway */
  Ipfs = 9,
  /** [ipmfs][crate::services::Ipmfs]: IPFS mutable file system */
  Ipmfs = 10,
  /** [memcached][crate::services::Memcached]: Memcached service support. */
  Memcached = 11,
  /** [memory][crate::services::Memory]: In memory backend support. */
  Memory = 12,
  /** [moka][crate::services::Moka]: moka backend support. */
  Moka = 13,
  /** [obs][crate::services::Obs]: Huawei Cloud OBS services. */
  Obs = 14,
  /** [oss][crate::services::Oss]: Aliyun Object Storage Services */
  Oss = 15,
  /** [redis][crate::services::Redis]: Redis services */
  Redis = 16,
  /** [rocksdb][crate::services::Rocksdb]: RocksDB services */
  Rocksdb = 17,
  /** [s3][crate::services::S3]: AWS S3 alike services. */
  S3 = 18,
  /** [sled][crate::services::Sled]: Sled services */
  Sled = 19,
  /** [webdav][crate::services::Webdav]: WebDAV support. */
  Webdav = 20,
  /** [webhdfs][crate::services::Webhdfs]: WebHDFS RESTful API Services */
  Webhdfs = 21
}
export const enum ObjectMode {
  /** FILE means the object has data to read. */
  FILE = 0,
  /** DIR means the object can be listed. */
  DIR = 1,
  /** Unknown means we don't know what we can do on this object. */
  Unknown = 2
}
export class Operator {
  constructor(serviceType: Scheme, options?: Record<string, string> | undefined | null)
  object(path: string): DataObject
}
export class ObjectMetadata {
  /** Mode of this object. */
  get mode(): ObjectMode
  /** Content-Disposition of this object */
  get contentDisposition(): string | null
  /** Content Length of this object */
  get contentLength(): bigint | null
  /** Content MD5 of this object. */
  get contentMd5(): string | null
  /** Content Type of this object. */
  get contentType(): string | null
  /** ETag of this object. */
  get etag(): string | null
  /** Last Modified of this object.(UTC) */
  get lastModified(): string | null
}
export class ObjectLister {
  next(): Promise<DataObject | null>
}
export class DataObject {
  stat(): Promise<ObjectMetadata>
  statSync(): ObjectMetadata
  write(content: Buffer): Promise<void>
  writeSync(content: Buffer): void
  read(): Promise<Buffer>
  readSync(): Buffer
  scan(): Promise<ObjectLister>
  delete(): Promise<void>
  deleteSync(): void
}
