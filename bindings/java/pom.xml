<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.apache.opendal</groupId>
    <artifactId>java-binding</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <rust-maven-plugin.version>1.0.0</rust-maven-plugin.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.questdb</groupId>
            <artifactId>jar-jni</artifactId>
            <version>${rust-maven-plugin.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--
                The Rust Maven Plugin
                Here it'll build the `str-reverse` crate and place the cdylib in the target's "classes" directory.
                Placing it there will have Maven automatically bundle the compiled code in the Jar.
            -->
            <plugin>
                <groupId>org.questdb</groupId>
                <artifactId>rust-maven-plugin</artifactId>
                <version>${rust-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>opendal-java</id>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <!--
                                Notes:
                                  * All paths are relative to ${project.basedir}
                                  * Spacing around double dashes to satisfy the XML parser.
                            -->

                            <!--
                                If you need to, you can customize the path to the Cargo command
                                Otherwise by default it will be searched for in the PATH.
                            -->
                            <!-- <cargoPath>/custom/path/to/rust/bin/cargo</cargoPath> -->

                            <!--
                                The path to the Rust crate we want to build (which will contain a Cargo.toml).
                            -->
                            <path>src/main/rust/opendal-java</path>

                            <!--
                                Passes `- - release` to `cargo build` to create a release build.
                                The default is to just call `cargo build` producing a debug build.
                                Many of the other `cargo build` options are also supported.
                                E.g. ` - - features` and ` - - no-default-features`.
                            -->
                            <release>true</release>



                            <!--
                                Copy the generated binaries to the "classes" directory in the build target.
                                We use this path because it will be bundled automatically into the final jar.
                            -->
                            <copyTo>${project.build.directory}/classes/org/apache/opendal/rust/libs</copyTo>

                            <!--
                                Further nest copy into a child directory named through the target's platform.
                                The directory name is computed by the `io.questdb.jar.jni.OsInfo.platform()` method.
                            -->
                            <copyWithPlatformDir>true</copyWithPlatformDir>

                            <!--
                                Additional environment variables used when calling `cargo build`.
                            -->
                            <extraArgs>
                                <extraArg>--color=always</extraArg>
                            </extraArgs>
                            <environmentVariables>
                                <REVERSED_STR_PREFIX>Great Scott, A reversed string!</REVERSED_STR_PREFIX>
                            </environmentVariables>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>